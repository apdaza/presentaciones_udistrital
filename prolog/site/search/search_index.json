{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/","text":"","title":"About"},{"location":"old_index/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"old_index/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"old_index/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"old_index/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"prolog/","text":"Tutorial de Prolog (Introducci\u00f3n B\u00e1sica) Introducci\u00f3n a Prolog Prolog (PROgramming in LOGic) es un lenguaje de programaci\u00f3n que se basa en la l\u00f3gica de predicados de primer orden. A diferencia de los lenguajes de programaci\u00f3n imperativos (como C o Python), en Prolog defines hechos y reglas , y el int\u00e9rprete de Prolog se encarga de realizar inferencias l\u00f3gicas a partir de esas definiciones para encontrar respuestas a consultas. Estructura B\u00e1sica Hechos: Son afirmaciones que describen el mundo. Reglas: Son condiciones que describen c\u00f3mo ciertos hechos pueden derivarse de otros. Consultas: Preguntas que se le hacen al sistema para obtener informaci\u00f3n basada en los hechos y reglas. Instalaci\u00f3n de SWI-Prolog Para seguir este tutorial, necesitas instalar un entorno de desarrollo de Prolog. El m\u00e1s com\u00fan es SWI-Prolog , que puedes descargar desde aqu\u00ed . Primeros Pasos con Prolog Definiendo Hechos Los hechos son declaraciones simples que describen relaciones entre objetos o propiedades. En Prolog, la sintaxis es muy simple. Cada hecho se termina con un punto ( . ). % Sintaxis b\u00e1sica: relacion(objeto1, objeto2, ...). es_padre_de(juan, maria). es_padre_de(carlos, pedro). es_padre_de(ana, jose). Aqu\u00ed hemos definido la relaci\u00f3n \"es_padre_de\", donde el primer argumento es el padre y el segundo es el hijo. Consultas B\u00e1sicas Una vez que tienes algunos hechos definidos, puedes hacer consultas. Por ejemplo, para preguntar qui\u00e9n es padre de qui\u00e9n: ?- es_padre_de(juan, maria). true. ?- es_padre_de(carlos, maria). false. Prolog responde con true si el hecho es cierto y con false si no lo es. Tambi\u00e9n puedes hacer preguntas m\u00e1s generales, como pedirle a Prolog que te diga todos los padres de alguien: ?- es_padre_de(X, maria). X = juan. Aqu\u00ed, X es una variable que Prolog intenta igualar con un valor que haga verdadera la consulta. Definiendo Reglas Las reglas permiten definir relaciones m\u00e1s complejas. Una regla tiene la siguiente sintaxis: % Regla: conclusion :- condicion1, condicion2, ... es_abuelo_de(X, Y) :- es_padre_de(X, Z), es_padre_de(Z, Y). Aqu\u00ed definimos que X es abuelo de Y si X es padre de Z y Z es padre de Y . Ejemplo de consulta con reglas: ?- es_abuelo_de(juan, jose). true. ?- es_abuelo_de(ana, pedro). false. Recursi\u00f3n en Prolog Prolog soporta recursi\u00f3n, lo que es muy \u00fatil para definir relaciones m\u00e1s complejas. Veamos un ejemplo donde definimos el concepto de ancestro. es_ancestro_de(X, Y) :- es_padre_de(X, Y). es_ancestro_de(X, Y) :- es_padre_de(X, Z), es_ancestro_de(Z, Y). En esta regla, es_ancestro_de/2 se define en t\u00e9rminos de s\u00ed misma para seguir la cadena de padres. Consultas Complejas Podemos realizar consultas que involucren tanto hechos como reglas. ?- es_ancestro_de(juan, jose). true. Prolog resolver\u00e1 la consulta utilizando las reglas y hechos que hemos definido. Listas en Prolog Prolog tiene soporte nativo para listas, que son una estructura de datos muy \u00fatil. Las listas en Prolog se escriben entre corchetes, y pueden contener cualquier n\u00famero de elementos. % Una lista simple [1, 2, 3, 4]. % Una lista con variables [X, 2, Y]. Puedes usar listas con reglas y consultas. Por ejemplo, para definir la relaci\u00f3n de pertenencia a una lista: miembro(X, [X|_]). miembro(X, [_|T]) :- miembro(X, T). Esta regla dice que X es miembro de una lista si es el primer elemento ( X|_ ) o si es miembro de la cola de la lista ( T ). Consultas con listas Podemos hacer consultas para verificar si un elemento pertenece a una lista: ?- miembro(2, [1, 2, 3]). true. ?- miembro(4, [1, 2, 3]). false. Backtracking en Prolog El proceso de backtracking es central en Prolog. Cuando Prolog recibe una consulta, intenta satisfacerla probando todas las posibles soluciones. Si una soluci\u00f3n falla, vuelve atr\u00e1s (backtrack) y prueba otra posible ruta. Ejemplo de backtracking Consideremos los siguientes hechos: color(rosa). color(azul). color(verde). Si hacemos una consulta para todos los colores posibles: ?- color(C). C = rosa ; C = azul ; C = verde. Prolog va a devolver todas las posibles soluciones de una en una, permitiendo hacer backtracking con ; . 1. Operadores Aritm\u00e9ticos y Relacionales En Prolog, es posible trabajar con operadores aritm\u00e9ticos y relacionales como lo har\u00edas en lenguajes imperativos. Aqu\u00ed est\u00e1n algunos de los m\u00e1s utilizados: Aritm\u00e9ticos : +, -, *, / / es la divisi\u00f3n entera. mod : m\u00f3dulo (resto de la divisi\u00f3n). ^ : potencia. Relacionales : >, <, >=, <= Ejemplo en Prolog: ?- X is 3 + 5. X = 8. ?- 9 > 7. true. Recuerda que para evaluar expresiones aritm\u00e9ticas, debes usar el operador is . Sin is , Prolog simplemente tratar\u00e1 las expresiones como t\u00e9rminos simb\u00f3licos. 2. Operadores de Igualdad Prolog tiene varios operadores de igualdad que permiten la comparaci\u00f3n de t\u00e9rminos: = : unificaci\u00f3n, verdadero si ambos operandos unifican. \\= : no unificaci\u00f3n, verdadero si no unifican. is : evaluaci\u00f3n aritm\u00e9tica y unificaci\u00f3n. =:= : compara valores despu\u00e9s de evaluar ambos lados de la expresi\u00f3n. Ejemplo en Prolog: ?- 3 = 3. true. ?- 3 \\= 4. true. ?- X is 3 * 5. X = 15. ?- 3 =:= 1 + 2. true. Casos comunes de error: Al usar is , ten en cuenta que las variables a la derecha deben estar instanciadas. De lo contrario, obtendr\u00e1s un error: ?- 5 is X + 4. Error: X no est\u00e1 instanciada. 3. Listas en Prolog Las listas en Prolog son una estructura de datos fundamental. Las listas se representan entre corchetes: [1, 2, 3, 4]. [X, Y, Z]. Operaciones comunes con listas: Longitud de una lista : Para calcular la longitud de una lista, usamos recursi\u00f3n: longitud([], 0). longitud([_|T], N) :- longitud(T, N0), N is N0 + 1. ?- longitud([a,b,c], L). L = 3. Pertenece a una lista : Para verificar si un elemento est\u00e1 en una lista: pertenece(X, [X|_]). pertenece(X, [_|T]) :- pertenece(X, T). ?- pertenece(b, [a, b, c]). true. Concatenaci\u00f3n de listas : concatenar([], L, L). concatenar([X|L1], L2, [X|L3]) :- concatenar(L1, L2, L3). ?- concatenar([1, 2], [3, 4], R). R = [1, 2, 3, 4]. 4. Operaciones Aritm\u00e9ticas y Estructuras En Prolog tambi\u00e9n puedes realizar c\u00e1lculos m\u00e1s complejos usando funciones matem\u00e1ticas: Funciones matem\u00e1ticas disponibles : abs/1 , sqrt/1 , log/1 , sin/1 , etc. ?- X is sqrt(16). X = 4.0. ?- Y is sin(1). Y = 0.8414709848078965. Tambi\u00e9n puedes representar datos estructurados como registros o \u00e1rboles. Por ejemplo: persona(nombre('Juan'), apellido('P\u00e9rez'), cc(123456789)). Para acceder a los datos: ?- persona(nombre(X), apellido(Y), _). X = 'Juan', Y = 'P\u00e9rez'. 5. Ejemplo Completo: Calculando el Porcentaje de Ganados Aqu\u00ed est\u00e1 un ejemplo m\u00e1s avanzado, basado en el contenido del archivo que compartiste: Definimos los siguientes hechos: ganados(juan, 7). ganados(susana, 6). jugados(juan, 13). jugados(susana, 7). Y una regla para calcular el porcentaje de juegos ganados: porcentaje(X, Y) :- ganados(X, Z), jugados(X, Q), Y is (Z/Q) * 100. ?- porcentaje(juan, P). P = 53.84615384615385. Predicados Din\u00e1micos en Prolog Los predicados din\u00e1micos en Prolog son aquellos que pueden ser modificados (a\u00f1adidos o eliminados) durante la ejecuci\u00f3n del programa. Esto es \u00fatil en aplicaciones donde los hechos o las reglas pueden cambiar a lo largo del tiempo, como en sistemas de bases de datos o en inteligencia artificial, donde los conocimientos se actualizan din\u00e1micamente. Para declarar un predicado como din\u00e1mico, se usa la directiva :- dynamic nombre_predicado/arity , donde arity es el n\u00famero de argumentos del predicado. Ejemplo B\u00e1sico de Predicado Din\u00e1mico Vamos a crear un predicado din\u00e1mico que maneje una base de datos simple de amigos. Primero, declaramos que el predicado es din\u00e1mico y luego usamos las funciones asserta , assertz y retract para manipular los hechos durante la ejecuci\u00f3n del programa. Declaraci\u00f3n del predicado din\u00e1mico :- dynamic amigo/2. Esto le dice a Prolog que el predicado amigo/2 (que acepta dos argumentos) puede modificarse din\u00e1micamente. A\u00f1adiendo hechos a la base de datos Podemos a\u00f1adir hechos de dos maneras: al principio de la base de datos con asserta o al final con assertz . ?- asserta(amigo(juan, pedro)). true. ?- assertz(amigo(ana, maria)). true. Ahora hemos a\u00f1adido dos hechos din\u00e1micos. Podemos consultarlos: ?- amigo(juan, X). X = pedro. ?- amigo(ana, X). X = maria. Eliminando hechos Para eliminar un hecho, usamos retract . ?- retract(amigo(juan, pedro)). true. ?- amigo(juan, X). false. En este caso, hemos eliminado el hecho amigo(juan, pedro) , por lo que la consulta ya no encuentra ninguna coincidencia. Ejemplo Completo: Base de Datos de Estudiantes y Notas Vamos a crear un ejemplo m\u00e1s completo, donde gestionaremos una base de datos din\u00e1mica de estudiantes y sus notas. Declaraci\u00f3n del predicado din\u00e1mico :- dynamic nota/2. A\u00f1adiendo hechos A\u00f1adimos informaci\u00f3n sobre las notas de los estudiantes: ?- assertz(nota(juan, 7)). true. ?- assertz(nota(ana, 9)). true. Ahora, tenemos dos estudiantes con sus respectivas notas. Consultando las notas Podemos hacer una consulta para obtener la nota de un estudiante: ?- nota(juan, N). N = 7. Actualizando notas Para actualizar la nota de un estudiante, primero eliminamos la entrada existente con retract y luego a\u00f1adimos la nueva con assertz : ?- retract(nota(juan, _)). true. ?- assertz(nota(juan, 8)). true. Ahora la nota de juan ha sido actualizada: ?- nota(juan, N). N = 8. Eliminando estudiantes Si queremos eliminar un estudiante de la base de datos: ?- retract(nota(ana, _)). true. Despu\u00e9s de esto, la consulta no encuentra el hecho: ?- nota(ana, N). false. Controlando M\u00faltiples Hechos Cuando usamos retract con variables, Prolog elimina el primer hecho que coincide con el patr\u00f3n. Si hay varios hechos que coinciden, puedes usar retractall para eliminar todos los hechos de un tipo. Ejemplo de uso de retractall Si queremos eliminar todas las notas de los estudiantes, usamos: ?- retractall(nota(_, _)). true. Esto eliminar\u00e1 todas las entradas relacionadas con nota . Predicados Din\u00e1micos: Uso en Programas Reales El uso de predicados din\u00e1micos es com\u00fan en programas que deben gestionar cambios en la informaci\u00f3n a lo largo del tiempo. Estos predicados son \u00fatiles en: Sistemas expertos : donde el conocimiento puede ser actualizado en funci\u00f3n de nuevos datos. Simulaciones : donde los hechos cambian durante la simulaci\u00f3n. Aplicaciones de bases de datos : que requieren que la informaci\u00f3n se agregue, actualice y elimine de manera din\u00e1mica.","title":"Prolog"},{"location":"prolog/#tutorial-de-prolog-introduccion-basica","text":"","title":"Tutorial de Prolog (Introducci\u00f3n B\u00e1sica)"},{"location":"prolog/#introduccion-a-prolog","text":"Prolog (PROgramming in LOGic) es un lenguaje de programaci\u00f3n que se basa en la l\u00f3gica de predicados de primer orden. A diferencia de los lenguajes de programaci\u00f3n imperativos (como C o Python), en Prolog defines hechos y reglas , y el int\u00e9rprete de Prolog se encarga de realizar inferencias l\u00f3gicas a partir de esas definiciones para encontrar respuestas a consultas.","title":"Introducci\u00f3n a Prolog"},{"location":"prolog/#estructura-basica","text":"Hechos: Son afirmaciones que describen el mundo. Reglas: Son condiciones que describen c\u00f3mo ciertos hechos pueden derivarse de otros. Consultas: Preguntas que se le hacen al sistema para obtener informaci\u00f3n basada en los hechos y reglas.","title":"Estructura B\u00e1sica"},{"location":"prolog/#instalacion-de-swi-prolog","text":"Para seguir este tutorial, necesitas instalar un entorno de desarrollo de Prolog. El m\u00e1s com\u00fan es SWI-Prolog , que puedes descargar desde aqu\u00ed .","title":"Instalaci\u00f3n de SWI-Prolog"},{"location":"prolog/#primeros-pasos-con-prolog","text":"","title":"Primeros Pasos con Prolog"},{"location":"prolog/#definiendo-hechos","text":"Los hechos son declaraciones simples que describen relaciones entre objetos o propiedades. En Prolog, la sintaxis es muy simple. Cada hecho se termina con un punto ( . ). % Sintaxis b\u00e1sica: relacion(objeto1, objeto2, ...). es_padre_de(juan, maria). es_padre_de(carlos, pedro). es_padre_de(ana, jose). Aqu\u00ed hemos definido la relaci\u00f3n \"es_padre_de\", donde el primer argumento es el padre y el segundo es el hijo.","title":"Definiendo Hechos"},{"location":"prolog/#consultas-basicas","text":"Una vez que tienes algunos hechos definidos, puedes hacer consultas. Por ejemplo, para preguntar qui\u00e9n es padre de qui\u00e9n: ?- es_padre_de(juan, maria). true. ?- es_padre_de(carlos, maria). false. Prolog responde con true si el hecho es cierto y con false si no lo es. Tambi\u00e9n puedes hacer preguntas m\u00e1s generales, como pedirle a Prolog que te diga todos los padres de alguien: ?- es_padre_de(X, maria). X = juan. Aqu\u00ed, X es una variable que Prolog intenta igualar con un valor que haga verdadera la consulta.","title":"Consultas B\u00e1sicas"},{"location":"prolog/#definiendo-reglas","text":"Las reglas permiten definir relaciones m\u00e1s complejas. Una regla tiene la siguiente sintaxis: % Regla: conclusion :- condicion1, condicion2, ... es_abuelo_de(X, Y) :- es_padre_de(X, Z), es_padre_de(Z, Y). Aqu\u00ed definimos que X es abuelo de Y si X es padre de Z y Z es padre de Y . Ejemplo de consulta con reglas: ?- es_abuelo_de(juan, jose). true. ?- es_abuelo_de(ana, pedro). false.","title":"Definiendo Reglas"},{"location":"prolog/#recursion-en-prolog","text":"Prolog soporta recursi\u00f3n, lo que es muy \u00fatil para definir relaciones m\u00e1s complejas. Veamos un ejemplo donde definimos el concepto de ancestro. es_ancestro_de(X, Y) :- es_padre_de(X, Y). es_ancestro_de(X, Y) :- es_padre_de(X, Z), es_ancestro_de(Z, Y). En esta regla, es_ancestro_de/2 se define en t\u00e9rminos de s\u00ed misma para seguir la cadena de padres.","title":"Recursi\u00f3n en Prolog"},{"location":"prolog/#consultas-complejas","text":"Podemos realizar consultas que involucren tanto hechos como reglas. ?- es_ancestro_de(juan, jose). true. Prolog resolver\u00e1 la consulta utilizando las reglas y hechos que hemos definido.","title":"Consultas Complejas"},{"location":"prolog/#listas-en-prolog","text":"Prolog tiene soporte nativo para listas, que son una estructura de datos muy \u00fatil. Las listas en Prolog se escriben entre corchetes, y pueden contener cualquier n\u00famero de elementos. % Una lista simple [1, 2, 3, 4]. % Una lista con variables [X, 2, Y]. Puedes usar listas con reglas y consultas. Por ejemplo, para definir la relaci\u00f3n de pertenencia a una lista: miembro(X, [X|_]). miembro(X, [_|T]) :- miembro(X, T). Esta regla dice que X es miembro de una lista si es el primer elemento ( X|_ ) o si es miembro de la cola de la lista ( T ).","title":"Listas en Prolog"},{"location":"prolog/#consultas-con-listas","text":"Podemos hacer consultas para verificar si un elemento pertenece a una lista: ?- miembro(2, [1, 2, 3]). true. ?- miembro(4, [1, 2, 3]). false.","title":"Consultas con listas"},{"location":"prolog/#backtracking-en-prolog","text":"El proceso de backtracking es central en Prolog. Cuando Prolog recibe una consulta, intenta satisfacerla probando todas las posibles soluciones. Si una soluci\u00f3n falla, vuelve atr\u00e1s (backtrack) y prueba otra posible ruta.","title":"Backtracking en Prolog"},{"location":"prolog/#ejemplo-de-backtracking","text":"Consideremos los siguientes hechos: color(rosa). color(azul). color(verde). Si hacemos una consulta para todos los colores posibles: ?- color(C). C = rosa ; C = azul ; C = verde. Prolog va a devolver todas las posibles soluciones de una en una, permitiendo hacer backtracking con ; .","title":"Ejemplo de backtracking"},{"location":"prolog/#1-operadores-aritmeticos-y-relacionales","text":"En Prolog, es posible trabajar con operadores aritm\u00e9ticos y relacionales como lo har\u00edas en lenguajes imperativos. Aqu\u00ed est\u00e1n algunos de los m\u00e1s utilizados: Aritm\u00e9ticos : +, -, *, / / es la divisi\u00f3n entera. mod : m\u00f3dulo (resto de la divisi\u00f3n). ^ : potencia. Relacionales : >, <, >=, <=","title":"1. Operadores Aritm\u00e9ticos y Relacionales"},{"location":"prolog/#ejemplo-en-prolog","text":"?- X is 3 + 5. X = 8. ?- 9 > 7. true. Recuerda que para evaluar expresiones aritm\u00e9ticas, debes usar el operador is . Sin is , Prolog simplemente tratar\u00e1 las expresiones como t\u00e9rminos simb\u00f3licos.","title":"Ejemplo en Prolog:"},{"location":"prolog/#2-operadores-de-igualdad","text":"Prolog tiene varios operadores de igualdad que permiten la comparaci\u00f3n de t\u00e9rminos: = : unificaci\u00f3n, verdadero si ambos operandos unifican. \\= : no unificaci\u00f3n, verdadero si no unifican. is : evaluaci\u00f3n aritm\u00e9tica y unificaci\u00f3n. =:= : compara valores despu\u00e9s de evaluar ambos lados de la expresi\u00f3n.","title":"2. Operadores de Igualdad"},{"location":"prolog/#ejemplo-en-prolog_1","text":"?- 3 = 3. true. ?- 3 \\= 4. true. ?- X is 3 * 5. X = 15. ?- 3 =:= 1 + 2. true.","title":"Ejemplo en Prolog:"},{"location":"prolog/#casos-comunes-de-error","text":"Al usar is , ten en cuenta que las variables a la derecha deben estar instanciadas. De lo contrario, obtendr\u00e1s un error: ?- 5 is X + 4. Error: X no est\u00e1 instanciada.","title":"Casos comunes de error:"},{"location":"prolog/#3-listas-en-prolog","text":"Las listas en Prolog son una estructura de datos fundamental. Las listas se representan entre corchetes: [1, 2, 3, 4]. [X, Y, Z].","title":"3. Listas en Prolog"},{"location":"prolog/#operaciones-comunes-con-listas","text":"Longitud de una lista : Para calcular la longitud de una lista, usamos recursi\u00f3n: longitud([], 0). longitud([_|T], N) :- longitud(T, N0), N is N0 + 1. ?- longitud([a,b,c], L). L = 3. Pertenece a una lista : Para verificar si un elemento est\u00e1 en una lista: pertenece(X, [X|_]). pertenece(X, [_|T]) :- pertenece(X, T). ?- pertenece(b, [a, b, c]). true. Concatenaci\u00f3n de listas : concatenar([], L, L). concatenar([X|L1], L2, [X|L3]) :- concatenar(L1, L2, L3). ?- concatenar([1, 2], [3, 4], R). R = [1, 2, 3, 4].","title":"Operaciones comunes con listas:"},{"location":"prolog/#4-operaciones-aritmeticas-y-estructuras","text":"En Prolog tambi\u00e9n puedes realizar c\u00e1lculos m\u00e1s complejos usando funciones matem\u00e1ticas: Funciones matem\u00e1ticas disponibles : abs/1 , sqrt/1 , log/1 , sin/1 , etc. ?- X is sqrt(16). X = 4.0. ?- Y is sin(1). Y = 0.8414709848078965. Tambi\u00e9n puedes representar datos estructurados como registros o \u00e1rboles. Por ejemplo: persona(nombre('Juan'), apellido('P\u00e9rez'), cc(123456789)). Para acceder a los datos: ?- persona(nombre(X), apellido(Y), _). X = 'Juan', Y = 'P\u00e9rez'.","title":"4. Operaciones Aritm\u00e9ticas y Estructuras"},{"location":"prolog/#5-ejemplo-completo-calculando-el-porcentaje-de-ganados","text":"Aqu\u00ed est\u00e1 un ejemplo m\u00e1s avanzado, basado en el contenido del archivo que compartiste: Definimos los siguientes hechos: ganados(juan, 7). ganados(susana, 6). jugados(juan, 13). jugados(susana, 7). Y una regla para calcular el porcentaje de juegos ganados: porcentaje(X, Y) :- ganados(X, Z), jugados(X, Q), Y is (Z/Q) * 100. ?- porcentaje(juan, P). P = 53.84615384615385.","title":"5. Ejemplo Completo: Calculando el Porcentaje de Ganados"},{"location":"prolog/#predicados-dinamicos-en-prolog","text":"Los predicados din\u00e1micos en Prolog son aquellos que pueden ser modificados (a\u00f1adidos o eliminados) durante la ejecuci\u00f3n del programa. Esto es \u00fatil en aplicaciones donde los hechos o las reglas pueden cambiar a lo largo del tiempo, como en sistemas de bases de datos o en inteligencia artificial, donde los conocimientos se actualizan din\u00e1micamente. Para declarar un predicado como din\u00e1mico, se usa la directiva :- dynamic nombre_predicado/arity , donde arity es el n\u00famero de argumentos del predicado.","title":"Predicados Din\u00e1micos en Prolog"},{"location":"prolog/#ejemplo-basico-de-predicado-dinamico","text":"Vamos a crear un predicado din\u00e1mico que maneje una base de datos simple de amigos. Primero, declaramos que el predicado es din\u00e1mico y luego usamos las funciones asserta , assertz y retract para manipular los hechos durante la ejecuci\u00f3n del programa.","title":"Ejemplo B\u00e1sico de Predicado Din\u00e1mico"},{"location":"prolog/#declaracion-del-predicado-dinamico","text":":- dynamic amigo/2. Esto le dice a Prolog que el predicado amigo/2 (que acepta dos argumentos) puede modificarse din\u00e1micamente.","title":"Declaraci\u00f3n del predicado din\u00e1mico"},{"location":"prolog/#anadiendo-hechos-a-la-base-de-datos","text":"Podemos a\u00f1adir hechos de dos maneras: al principio de la base de datos con asserta o al final con assertz . ?- asserta(amigo(juan, pedro)). true. ?- assertz(amigo(ana, maria)). true. Ahora hemos a\u00f1adido dos hechos din\u00e1micos. Podemos consultarlos: ?- amigo(juan, X). X = pedro. ?- amigo(ana, X). X = maria.","title":"A\u00f1adiendo hechos a la base de datos"},{"location":"prolog/#eliminando-hechos","text":"Para eliminar un hecho, usamos retract . ?- retract(amigo(juan, pedro)). true. ?- amigo(juan, X). false. En este caso, hemos eliminado el hecho amigo(juan, pedro) , por lo que la consulta ya no encuentra ninguna coincidencia.","title":"Eliminando hechos"},{"location":"prolog/#ejemplo-completo-base-de-datos-de-estudiantes-y-notas","text":"Vamos a crear un ejemplo m\u00e1s completo, donde gestionaremos una base de datos din\u00e1mica de estudiantes y sus notas.","title":"Ejemplo Completo: Base de Datos de Estudiantes y Notas"},{"location":"prolog/#declaracion-del-predicado-dinamico_1","text":":- dynamic nota/2.","title":"Declaraci\u00f3n del predicado din\u00e1mico"},{"location":"prolog/#anadiendo-hechos","text":"A\u00f1adimos informaci\u00f3n sobre las notas de los estudiantes: ?- assertz(nota(juan, 7)). true. ?- assertz(nota(ana, 9)). true. Ahora, tenemos dos estudiantes con sus respectivas notas.","title":"A\u00f1adiendo hechos"},{"location":"prolog/#consultando-las-notas","text":"Podemos hacer una consulta para obtener la nota de un estudiante: ?- nota(juan, N). N = 7.","title":"Consultando las notas"},{"location":"prolog/#actualizando-notas","text":"Para actualizar la nota de un estudiante, primero eliminamos la entrada existente con retract y luego a\u00f1adimos la nueva con assertz : ?- retract(nota(juan, _)). true. ?- assertz(nota(juan, 8)). true. Ahora la nota de juan ha sido actualizada: ?- nota(juan, N). N = 8.","title":"Actualizando notas"},{"location":"prolog/#eliminando-estudiantes","text":"Si queremos eliminar un estudiante de la base de datos: ?- retract(nota(ana, _)). true. Despu\u00e9s de esto, la consulta no encuentra el hecho: ?- nota(ana, N). false.","title":"Eliminando estudiantes"},{"location":"prolog/#controlando-multiples-hechos","text":"Cuando usamos retract con variables, Prolog elimina el primer hecho que coincide con el patr\u00f3n. Si hay varios hechos que coinciden, puedes usar retractall para eliminar todos los hechos de un tipo.","title":"Controlando M\u00faltiples Hechos"},{"location":"prolog/#ejemplo-de-uso-de-retractall","text":"Si queremos eliminar todas las notas de los estudiantes, usamos: ?- retractall(nota(_, _)). true. Esto eliminar\u00e1 todas las entradas relacionadas con nota .","title":"Ejemplo de uso de retractall"},{"location":"prolog/#predicados-dinamicos-uso-en-programas-reales","text":"El uso de predicados din\u00e1micos es com\u00fan en programas que deben gestionar cambios en la informaci\u00f3n a lo largo del tiempo. Estos predicados son \u00fatiles en: Sistemas expertos : donde el conocimiento puede ser actualizado en funci\u00f3n de nuevos datos. Simulaciones : donde los hechos cambian durante la simulaci\u00f3n. Aplicaciones de bases de datos : que requieren que la informaci\u00f3n se agregue, actualice y elimine de manera din\u00e1mica.","title":"Predicados Din\u00e1micos: Uso en Programas Reales"}]}